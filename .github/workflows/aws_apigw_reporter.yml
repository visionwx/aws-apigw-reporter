name: AWS_APIGW_REPORTER

on:
    workflow_dispatch:
    schedule:
      - cron:  '10 1 * * *'

env:
    AWS_S3_KEY_ID: ${{ secrets.AWS_S3_KEY_ID }}
    AWS_S3_KEY_SECRET: ${{ secrets.AWS_S3_KEY_SECRET }}
    AWS_S3_BUCKET_NAME: boom2-resource
    AWS_S3_COMPONENT_BUCKET_NAME: trickle-component
    AWS_S3_REGION: us-east-1
    AWS_CLOUD_FRONT_DISTRIBUTION_ID: E28OIAI99C3YGA
    AWS_DEPLOY_KEY: ${{ secrets.AWS_DEPLOY_KEY }}
    AWS_DEPLOY_SECRET: ${{ secrets.AWS_DEPLOY_SECRET }}
    AWS_LAMBDA_FUNCTION_NAME: trickle_ssr_dev
    ECR_REGISTRY: 257417524232.dkr.ecr.us-east-1.amazonaws.com
    IMAGE_NAME: trickle-ssr
    AWS_DEFAULT_REGION: us-east-1
    AWS_LAMBDA_EDGE_FUNCTION_NAME: trickle_edge_dev
    AWS_S3_LAMBDA_PACKAGE_BUCKET_NAME: lambda-package-20220712
    TRICKLE_WORKSPACE_ID: ${{ secrets.TRICKLE_WORKSPACE_ID }}
    TRICKLE_MEMBER_ID: ${{ secrets.TRICKLE_MEMBER_ID }}
    TRICKLE_CHANNEL_ID: ${{ secrets.TRICKLE_CHANNEL_ID }}
    LBD_TRICKLE_APP: trickle-app-lambda-live
    LBD_TRICKLE_ASYNC: trickle_async_handler_live
    LBD_SOCKET_APP: socket_service_live
    LBD_SOCKET_SEND: SEND_SOCKET_MESSAGE_LIVE
    LBD_BAAS_APP: baas-vc-async-handler-live
    LBD_BAAS_ASYNC: baas-vc-app-handler-live
    LBD_PERIOD: 900

jobs:
    rps:
        name: rps
        runs-on: ubuntu-latest
        outputs:
          reportUrl: ${{ steps.upload.outputs.reportUrl }}
        steps:
            # Pull Code
            - name: Pull repo
              uses: actions/checkout@v2

            # Configure AWS S3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_DEPLOY_KEY }}
                  aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET }}
                  aws-region: ${{ env.AWS_S3_REGION }}
            
            # Get last day
            - name: Get last day
              id: get-date
              run: |
                date -d "1 day ago" +"%Y-%m-%d"

            # Send Query Request
            - name: Send query reuqest
              id: query
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                cdate=`date +"%Y-%m-%d"`
                aws logs start-query \
                  --log-group-name API_GW_LIVE_V1 \
                  --start-time `date -d "$ldate 00:00:00" +%s` \
                  --end-time `date -d "$cdate 00:00:00" +%s` \
                  --query-string 'fields @timestamp, @message | stats count() by bin(15m)' > query_request.json
                content=`cat query_request.json`
                content="${content//'%'/'%25'}"
                content="${content//$'\n'/'%0A'}"
                content="${content//$'\r'/'%0D'}"
                echo "::set-output name=queryResult::$content"

            # sleep 10s
            - name: Sleep for 10s
              uses: juliangruber/sleep-action@v1
              with:
                time: 10s

            # Get Query Result
            - name: Get query result
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                echo "${{fromJson(steps.query.outputs.queryResult).queryId}}"
                aws logs get-query-results --query-id ${{fromJson(steps.query.outputs.queryResult).queryId}} > query_result.json
                mv query_result.json rps_result.json
                python3 parse_rps_result.py
                mkdir -p out/$ldate
                cp rps.html out/$ldate
                cp rps.html.json out/$ldate
            
            # Upload report
            - name: Upload report
              id: upload
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                aws s3 sync out/$ldate s3://${{ env.AWS_S3_BUCKET_NAME }}/miniapps/$ldate
                reportUrl=https://devres.trickle.so/miniapps/$ldate/rps.html
                echo "::set-output name=reportUrl::$reportUrl"

    status:
        name: status
        runs-on: ubuntu-latest
        outputs:
          reportUrl: ${{ steps.upload.outputs.reportUrl }}
        steps:
            # Pull Code
            - name: Pull repo
              uses: actions/checkout@v2

            # Configure AWS S3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_DEPLOY_KEY }}
                  aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET }}
                  aws-region: ${{ env.AWS_S3_REGION }}
            
            # Get last day
            - name: Get last day
              id: get-date
              run: |
                date -d "1 day ago" +"%Y-%m-%d"

            # Send Query Request
            - name: Send query reuqest
              id: query
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                cdate=`date +"%Y-%m-%d"`
                aws logs start-query \
                  --log-group-name API_GW_LIVE_V1 \
                  --start-time `date -d "$ldate 00:00:00" +%s` \
                  --end-time `date -d "$cdate 00:00:00" +%s` \
                  --query-string 'fields @timestamp, @message | stats count() as statusCount by status | sort statusCount desc' > query_request.json
                content=`cat query_request.json`
                content="${content//'%'/'%25'}"
                content="${content//$'\n'/'%0A'}"
                content="${content//$'\r'/'%0D'}"
                echo "::set-output name=queryResult::$content"

            # sleep 10s
            - name: Sleep for 10s
              uses: juliangruber/sleep-action@v1
              with:
                time: 10s

            # Get Query Result
            - name: Get query result
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                echo "${{fromJson(steps.query.outputs.queryResult).queryId}}"
                aws logs get-query-results --query-id ${{fromJson(steps.query.outputs.queryResult).queryId}} > query_result.json
                mv query_result.json status_result.json
                python3 parse_status_result.py
                mkdir -p out/$ldate
                cp status.html out/$ldate
                cp status.html.json out/$ldate
            
            # Upload report
            - name: Upload report
              id: upload
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                aws s3 sync out/$ldate s3://${{ env.AWS_S3_BUCKET_NAME }}/miniapps/$ldate
                reportUrl=https://devres.trickle.so/miniapps/$ldate/status.html
                echo "::set-output name=reportUrl::$reportUrl"

    send-trickle:
        name: send-trickle
        runs-on: ubuntu-latest
        needs: [rps,status]
        steps:
            # Get last day
            - name: Get last day
              id: getdate
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                echo "::set-output name=ldate::$ldate"

            # Send trickle
            - name: Send trickle
              uses: visionwx/trickle-sender@v1.0.4
              with:
                trickleToken: ${{ secrets.trickleToken }}
                workspaceId: ${{ env.TRICKLE_WORKSPACE_ID }}
                memberId: ${{ env.TRICKLE_MEMBER_ID }}
                channelId: ${{ env.TRICKLE_CHANNEL_ID }}
                blockType: trickle
                blockData: '[{"type":"h2","value":"API Gateway Report for ${{ steps.getdate.outputs.ldate }}"},{"type":"embed","value":"${{ needs.status.outputs.reportUrl }}"},{"type":"embed","value":"${{ needs.rps.outputs.reportUrl }}"}]'
