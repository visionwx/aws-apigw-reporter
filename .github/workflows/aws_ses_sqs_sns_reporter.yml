name: AWS_SES_SQS_REPORTER

on:
    workflow_dispatch:
    schedule:
      - cron:  '25 1 * * *'

# on:
#   push:
#     branches: [ dev_bob ]

env:
    AWS_S3_KEY_ID: ${{ secrets.AWS_S3_KEY_ID }}
    AWS_S3_KEY_SECRET: ${{ secrets.AWS_S3_KEY_SECRET }}
    AWS_S3_BUCKET_NAME: boom2-resource
    AWS_S3_COMPONENT_BUCKET_NAME: trickle-component
    AWS_S3_REGION: us-east-1
    AWS_CLOUD_FRONT_DISTRIBUTION_ID: E28OIAI99C3YGA
    AWS_DEPLOY_KEY: ${{ secrets.AWS_DEPLOY_KEY }}
    AWS_DEPLOY_SECRET: ${{ secrets.AWS_DEPLOY_SECRET }}
    AWS_LAMBDA_FUNCTION_NAME: trickle_ssr_dev
    ECR_REGISTRY: 257417524232.dkr.ecr.us-east-1.amazonaws.com
    IMAGE_NAME: trickle-ssr
    AWS_DEFAULT_REGION: us-east-1
    AWS_LAMBDA_EDGE_FUNCTION_NAME: trickle_edge_dev
    AWS_S3_LAMBDA_PACKAGE_BUCKET_NAME: lambda-package-20220712
    TRICKLE_WORKSPACE_ID: ${{ secrets.TRICKLE_WORKSPACE_ID }}
    TRICKLE_MEMBER_ID: ${{ secrets.TRICKLE_MEMBER_ID }}
    TRICKLE_CHANNEL_ID: "619693070752940038"
    LBD_TRICKLE_APP: trickle-app-lambda-live
    LBD_TRICKLE_ASYNC: trickle_async_handler_live
    LBD_SOCKET_APP: socket_service_live
    LBD_SOCKET_SEND: SEND_SOCKET_MESSAGE_LIVE
    LBD_BAAS_APP: baas-vc-async-handler-live
    LBD_BAAS_ASYNC: baas-vc-app-handler-live
    LBD_PERIOD: 900
    MYSQL_NAME: trickle

jobs:

    ses_stat:
        name: ses_stat
        runs-on: ubuntu-latest
        outputs:
          reportUrl: ${{ steps.upload.outputs.reportUrl }}
        steps:
            # Pull Code
            - name: Pull repo
              uses: actions/checkout@v2

            # Configure AWS S3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_DEPLOY_KEY }}
                  aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET }}
                  aws-region: ${{ env.AWS_S3_REGION }}
            
            # Get last day
            - name: Get last day
              id: get-date
              run: |
                date -d "1 day ago" +"%Y-%m-%d"

            # Send Query Request
            - name: Send query reuqest
              id: query
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                cdate=`date +"%Y-%m-%d"`
                rm -rf outs
                mkdir outs
                mkdir -p outs/$ldate/ses_stat
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SES \
                  --metric-name Send \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }}  > outs/ses_send.json
                 aws cloudwatch get-metric-statistics \
                  --namespace AWS/SES \
                  --metric-name Bounce \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }}  > outs/ses_bounce.json               

                python3 parse_lambda_stats.py -f outs -p ${{ env.LBD_PERIOD }} -t 'SesStat(Counts)' -m Sum
                cp outs.json lines.html.json
                cp lines.html outs/$ldate/ses_stat
                cp lines.html.json outs/$ldate/ses_stat
            
            # Upload report
            - name: Upload report
              id: upload
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                aws s3 sync outs/$ldate/ses_stat s3://${{ env.AWS_S3_BUCKET_NAME }}/miniapps/$ldate/ses_stat
                reportUrl=https://devres.trickle.so/miniapps/$ldate/ses_stat/lines.html
                echo "::set-output name=reportUrl::$reportUrl"

    trickle_sqs_stat:
        name: trickle_sqs_stat
        runs-on: ubuntu-latest
        outputs:
          reportUrl: ${{ steps.upload.outputs.reportUrl }}
        steps:
            # Pull Code
            - name: Pull repo
              uses: actions/checkout@v2

            # Configure AWS S3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_DEPLOY_KEY }}
                  aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET }}
                  aws-region: ${{ env.AWS_S3_REGION }}
            
            # Get last day
            - name: Get last day
              id: get-date
              run: |
                date -d "1 day ago" +"%Y-%m-%d"

            # Send Query Request
            - name: Send query reuqest
              id: query
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                cdate=`date +"%Y-%m-%d"`
                rm -rf outs
                mkdir outs
                mkdir -p outs/$ldate/trickle_sqs_stat

                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesReceived \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=TRICKLE > outs/TRICKLE_MessReceived.json
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesSent \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=TRICKLE > outs/TRICKLE_MessSent.json                
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name ApproximateAgeOfOldestMessage \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=TRICKLE > outs/TRICKLE_AgeOfOldestMess.json
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesDeleted \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=TRICKLE > outs/TRICKLE_MessDeleted.json
                                              
                python3 parse_lambda_stats.py -f outs -p ${{ env.LBD_PERIOD }} -t 'TrickleSqsStats(Counts)' -m Sum
                cp outs.json lines.html.json
                cp lines.html outs/$ldate/trickle_sqs_stat
                cp lines.html.json outs/$ldate/trickle_sqs_stat



            # Upload report
            - name: Upload report
              id: upload
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                aws s3 sync outs/$ldate/trickle_sqs_stat s3://${{ env.AWS_S3_BUCKET_NAME }}/miniapps/$ldate/trickle_sqs_stat
                reportUrl=https://devres.trickle.so/miniapps/$ldate/trickle_sqs_stat/lines.html
                echo "::set-output name=reportUrl::$reportUrl"

    socket_sqs_stat:
        name: socket_sqs_stat
        runs-on: ubuntu-latest
        outputs:
          reportUrl: ${{ steps.upload.outputs.reportUrl }}
        steps:
            # Pull Code
            - name: Pull repo
              uses: actions/checkout@v2

            # Configure AWS S3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_DEPLOY_KEY }}
                  aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET }}
                  aws-region: ${{ env.AWS_S3_REGION }}
            
            # Get last day
            - name: Get last day
              id: get-date
              run: |
                date -d "1 day ago" +"%Y-%m-%d"

            # Send Query Request
            - name: Send query reuqest
              id: query
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                cdate=`date +"%Y-%m-%d"`
                rm -rf outs
                mkdir outs
                mkdir -p outs/$ldate/socket_sqs_stat

                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesReceived \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=PUSH_WEBSOCKET_MESSAGE_LIVE.fifo > outs/SOCKET_MessReceived.json
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesSent \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }}  \
                  --dimensions Name=QueueName,Value=PUSH_WEBSOCKET_MESSAGE_LIVE.fifo > outs/SOCKET_MessSent.json                
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name ApproximateAgeOfOldestMessage \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=PUSH_WEBSOCKET_MESSAGE_LIVE.fifo > outs/SOCKET_AgeOfOldestMess.json
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesDeleted \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=PUSH_WEBSOCKET_MESSAGE_LIVE.fifo > outs/SOCKET_MessDeleted.json
                                              
                python3 parse_lambda_stats.py -f outs -p ${{ env.LBD_PERIOD }} -t 'SocketSqsStats(Counts)' -m Sum
                cp outs.json lines.html.json
                cp lines.html outs/$ldate/socket_sqs_stat
                cp lines.html.json outs/$ldate/socket_sqs_stat



            # Upload report
            - name: Upload report
              id: upload
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                aws s3 sync outs/$ldate/socket_sqs_stat s3://${{ env.AWS_S3_BUCKET_NAME }}/miniapps/$ldate/socket_sqs_stat
                reportUrl=https://devres.trickle.so/miniapps/$ldate/socket_sqs_stat/lines.html
                echo "::set-output name=reportUrl::$reportUrl"

    version_sqs_stat:
        name: version_sqs_stat
        runs-on: ubuntu-latest
        outputs:
          reportUrl: ${{ steps.upload.outputs.reportUrl }}
        steps:
            # Pull Code
            - name: Pull repo
              uses: actions/checkout@v2

            # Configure AWS S3
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ env.AWS_DEPLOY_KEY }}
                  aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET }}
                  aws-region: ${{ env.AWS_S3_REGION }}
            
            # Get last day
            - name: Get last day
              id: get-date
              run: |
                date -d "1 day ago" +"%Y-%m-%d"

            # Send Query Request
            - name: Send query reuqest
              id: query
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                cdate=`date +"%Y-%m-%d"`
                rm -rf outs
                mkdir outs
                mkdir -p outs/$ldate/version_sqs_stat

                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesReceived \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=VERSION-CONTROL-LIVE.fifo > outs/VERSION_MessReceived.json
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesSent \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }}  \
                  --dimensions Name=QueueName,Value=VERSION-CONTROL-LIVE.fifo > outs/VERSION_MessSent.json                
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name ApproximateAgeOfOldestMessage \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=VERSION-CONTROL-LIVE.fifo > outs/VERSION_AgeOfOldestMess.json
                aws cloudwatch get-metric-statistics \
                  --namespace AWS/SQS \
                  --metric-name NumberOfMessagesDeleted \
                  --statistics Sum \
                  --start-time ${ldate}T00:00:00 \
                  --end-time ${cdate}T00:00:00 \
                  --period ${{ env.LBD_PERIOD }} \
                  --dimensions Name=QueueName,Value=VERSION-CONTROL-LIVE.fifo > outs/VERSION_MessDeleted.json
                                              
                python3 parse_lambda_stats.py -f outs -p ${{ env.LBD_PERIOD }} -t 'VersionSqsStats(Counts)' -m Sum
                cp outs.json lines.html.json
                cp lines.html outs/$ldate/version_sqs_stat
                cp lines.html.json outs/$ldate/version_sqs_stat



            # Upload report
            - name: Upload report
              id: upload
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                aws s3 sync outs/$ldate/version_sqs_stat s3://${{ env.AWS_S3_BUCKET_NAME }}/miniapps/$ldate/version_sqs_stat
                reportUrl=https://devres.trickle.so/miniapps/$ldate/version_sqs_stat/lines.html
                echo "::set-output name=reportUrl::$reportUrl"


    send-trickle:
        name: send-trickle
        runs-on: ubuntu-latest
        needs: [ses_stat,trickle_sqs_stat,socket_sqs_stat,version_sqs_stat]
        steps:
            # Get last day
            - name: Get last day
              id: getdate
              run: |
                ldate=`date -d "1 day ago" +"%Y-%m-%d"`
                echo "::set-output name=ldate::$ldate"

            # Send trickle
            - name: Send trickle
              uses: visionwx/trickle-sender@v1.0.4
              with:
                trickleToken: ${{ secrets.trickleToken }}
                workspaceId: ${{ env.TRICKLE_WORKSPACE_ID }}
                memberId: ${{ env.TRICKLE_MEMBER_ID }}
                channelId: ${{ env.TRICKLE_CHANNEL_ID }}
                blockType: trickle
                blockData: '[{"type":"h2","value":"AWS SES/SQS Report for ${{ steps.getdate.outputs.ldate }}"},{"type":"text","value":""},{"type":"embed","value":"${{ needs.ses_stat.outputs.reportUrl }}"},{"type":"text","value":""},{"type":"embed","value":"${{ needs.trickle_sqs_stat.outputs.reportUrl }}"},{"type":"text","value":""},{"type":"embed","value":"${{ needs.socket_sqs_stat.outputs.reportUrl }}"},{"type":"text","value":""},{"type":"embed","value":"${{ needs.version_sqs_stat.outputs.reportUrl }}"}]'
